#!/usr/bin/ruby -w
require 'json'

# Remember, these are all stored in C=64 Code!
@films = [ 
	{ 
		:name => "SPACE WARS",
  		:budget_min => 5000,
  		:budget_ideal => 30000,
	},
	{ 
		:name => "SLASHER NIGHTS",
  		:budget_min => 500,
  		:budget_ideal => 12000,
	},
	{ 
		:name => "DEMON DUSTERS",
  		:budget_min => 1500,
  		:budget_ideal => 26000,
	},
	{ 
		:name => "THE LAST BATTLE",
  		:budget_min => 2500,
  		:budget_ideal => 19000,
	},
	{ 
		:name => "GUNS & RIFLES",
  		:budget_min => 2000,
  		:budget_ideal => 17000,
	},
	{ 
		:name => "FINAL REUNION",
  		:budget_min => 1000,
  		:budget_ideal => 15000,
	},
	{ 
		:name => "BONKERS!",
  		:budget_min => 250,
  		:budget_ideal => 7000,
	},
	{ 
		:name => "QUEST FOR HONOR",
  		:budget_min => 3000,
  		:budget_ideal => 27000,
	},
	{ 
		:name => "I'VE GOT MUSIC",
  		:budget_min => 1200,
  		:budget_ideal => 16000,
	},
	{ 
		:name => "CONSENT TO KILL",
  		:budget_min => 750,
  		:budget_ideal => 18000,
	},
	{ 
		:name => "EXECUTIVE DECISIONS",
  		:budget_min => 1000,
  		:budget_ideal => 15000,
	},
	{ 
		:name => "STRANGE BEDFELLOWS",
  		:budget_min => 1000,
  		:budget_ideal => 15000,
	},	
]

def write_movie(ln_ar)
	film = { 
		:description => "#{ln_ar[0]} #{ln_ar[1]}",
		:role_1 => {
			:name => "#{ln_ar[2]}",
			:gender => convert_to_gender(ln_ar[5]),
			:data => [ln_ar[6], ln_ar[7], ln_ar[8], ln_ar[9], ln_ar[10], ln_ar[11], ln_ar[12]]
		},
		:role_2 => {
			:name => "#{ln_ar[3]}",
			:gender => convert_to_gender(ln_ar[13]),
			:data => [ln_ar[14], ln_ar[15], ln_ar[16], ln_ar[17], ln_ar[18], ln_ar[19], ln_ar[20]]
		},
		:role_3 => {
			:name => "#{ln_ar[4]}",
			:gender => convert_to_gender(ln_ar[21]),
			:data => [ln_ar[22], ln_ar[23], ln_ar[24], ln_ar[25], ln_ar[26], ln_ar[27], ln_ar[28]]
		}
	}
	theFilm = @films.shift.merge(film)
	puts "-- Data for #{theFilm[:name]}"
	role1 =	theFilm[:role_1]
	puts "insert into role (name, gender, data0, data1, data2, data3, data4, data5, data6) values ('#{role1[:name]}','#{role1[:gender]}',#{role1[:data][0]}, #{role1[:data][1]}, #{role1[:data][2]}, #{role1[:data][3]},#{role1[:data][4]},#{role1[:data][5]},#{role1[:data][6]});"
	role2 =	theFilm[:role_2]
	puts "insert into role (name, gender, data0, data1, data2, data3, data4, data5, data6) values ('#{role2[:name]}','#{role2[:gender]}',#{role2[:data][0]}, #{role2[:data][1]}, #{role2[:data][2]}, #{role2[:data][3]},#{role2[:data][4]},#{role2[:data][5]},#{role2[:data][6]});"
	role3 =	theFilm[:role_3]
	puts "insert into role (name, gender, data0, data1, data2, data3, data4, data5, data6) values ('#{role3[:name]}','#{role3[:gender]}',#{role3[:data][0]}, #{role3[:data][1]}, #{role3[:data][2]}, #{role3[:data][3]},#{role3[:data][4]},#{role3[:data][5]},#{role3[:data][6]});"
	puts "insert into film (name, budget_minimum, budget_ideal, description) values ('#{theFilm[:name]}', #{theFilm[:budget_min]}, #{theFilm[:budget_ideal]}, '#{theFilm[:description]}');"
	puts "insert into film_roles (film_id, role_id) select film.id, role.id from film cross join role where film.name = '#{theFilm[:name]}' and role.name = '#{role1[:name]}';"
	puts "insert into film_roles (film_id, role_id) select film.id, role.id from film cross join role where film.name = '#{theFilm[:name]}' and role.name = '#{role2[:name]}';"
	puts "insert into film_roles (film_id, role_id) select film.id, role.id from film cross join role where film.name = '#{theFilm[:name]}' and role.name = '#{role3[:name]}';"


#create table film (id bigint generated by default as identity, budget_ideal smallint, budget_minimum smallint, description varchar(255), name varchar(255), primary key (id));
#create table film_roles (film_id bigint not null, role_id bigint not null, primary key (film_id, role_id));
#create table role (id bigint generated by default as identity, data0 tinyint, data1 tinyint, data2 tinyint, data3 tinyint, data4 tinyint, data5 tinyint, data6 tinyint, gender varchar(255), name varchar(255), primary key (id));

	#puts  JSON.generate(@films.shift.merge(film))
end

def convert_to_gender(value) 
	case value
		when "1"
			return "M"
		when "5"
			return "N"
		when "9"
			return "F"
	end
end

File.open("../c64/movie data.seq", "r") do |movie_file|
	movie_lines = []
    while (line = movie_file.gets)
    	movie_lines << line.chomp
    	if movie_lines.size > 28
    		write_movie(movie_lines)
    		movie_lines = []
    	end			
    end
end

